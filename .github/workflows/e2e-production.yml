# E2E Tests on Render Production (with Email Summary)
# This workflow runs comprehensive Playwright E2E tests against the Render production deployment
# for both mobile and desktop viewports, then sends a summary email.

name: E2E Tests on Render (with Email Summary)

# Trigger conditions:
# - workflow_dispatch: Manual trigger from GitHub Actions UI
# - push to deploy/render-staging: Automatic on code changes
# - repository_dispatch: Automatic when Render sends deploy_succeeded event
on:
  workflow_dispatch:
  push:
    branches:
      - deploy/render-staging
  repository_dispatch:
    types: [render_deploy_succeeded]

jobs:
  e2e:
    name: E2E Tests (Mobile + Desktop)
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup Node.js 20 (required for Playwright and project dependencies)
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'  # Cache npm packages for faster builds

      # Step 3: Install project dependencies (including nodemailer for email notifications)
      - name: Install dependencies
        run: npm ci
        # npm ci installs exact versions from package-lock.json, ensuring consistency

      # Step 4: Install Playwright browsers with system dependencies
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        # --with-deps installs required system libraries (e.g., libnss3, libatk-bridge2.0-0)
        # Required for headless browser execution in CI environment

      # Step 5: Run E2E tests using the helper script
      # The script handles health checks, test execution, and summary generation
      - name: Run E2E tests (Mobile + Desktop)
        env:
          # Production Render deployment URL
          BASE_URL: https://cricket-academy-app.onrender.com
          # Test credentials for authentication
          ADMIN_EMAIL: admin@test.com
          ADMIN_PASSWORD: password
        run: |
          chmod +x .github/scripts/run-e2e.sh
          bash .github/scripts/run-e2e.sh
        # The script runs tests against both mobile (Pixel 5) and desktop (Chrome) viewports
        # using playwright.multi.config.ts configuration

      # Step 6: Generate failure summary from JSON report
      # Parses the JSON test report and creates e2e-failures.txt with failure details
      - name: Generate failure summary
        if: always()
        run: |
          node -e "console.log('Preparing summary…')" # placeholder
          node <<'JS'
          const fs=require('fs');
          if (!fs.existsSync('./e2e-report.json')) {
            fs.writeFileSync('e2e-failures.txt', 'No test report generated. Tests may have failed during execution.');
            process.exit(0);
          }
          try {
            const r=JSON.parse(fs.readFileSync('./e2e-report.json','utf8'));
            function w(s,o=[]){
              (s.suites||[]).forEach(x=>w(x,o));
              (s.tests||[]).forEach(t=>t.results.forEach(k=>{
                if(k.status!=='passed'){
                  o.push(`${t.title} — ${k.status}\n${(k.error&&k.error.message)||''}`)
                }
              }));
              return o;
            }
            const f=w(r);
            fs.writeFileSync('e2e-failures.txt', f.length?`E2E Failures:\n\n${f.join('\n\n')}`:'All tests passed ✅');
          } catch (e) {
            fs.writeFileSync('e2e-failures.txt', `Error parsing test report: ${e.message}\n\nUsing fallback summary from e2e-failures.txt if available.`);
          }
          JS
          # Fallback: if JSON parsing fails, use the summary from run-e2e.sh script
          if [ ! -f "e2e-failures.txt" ] || [ ! -s "e2e-failures.txt" ]; then
            echo "Using fallback summary from test execution..." || echo "All tests passed ✅" > e2e-failures.txt
          fi

      # Step 7: Send email summary using GitHub Action (SMTP via Gmail)
      # Uses dawidd6/action-send-mail which works with Gmail App Password or any SMTP
      - name: Email E2E summary
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.GMAIL_USER }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: Render E2E — ${{ job.status }}
          to: dude.dudetap001@gmail.com
          from: Render E2E Bot <${{ secrets.GMAIL_USER }}>
          body: |
            Environment: production (Render)
            Status: ${{ job.status }}
            Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            $(cat e2e-failures.txt)
        # Note: Requires GMAIL_USER and GMAIL_APP_PASSWORD secrets in GitHub

      # Step 8: Upload test artifacts for debugging and review
      - name: Upload test artifacts
        if: always()  # Upload even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: playwright-e2e-results
          path: |
            test-results/**          # Screenshots, videos, traces from failed tests
            playwright-report/**     # HTML test report
            e2e-report.json          # JSON test report (for parsing)
            e2e-failures.txt         # Text summary of failures
          if-no-files-found: ignore  # Don't fail if no artifacts exist
