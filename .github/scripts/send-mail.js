/**
 * Email Notification Script for E2E Test Results
 * 
 * This script sends a summary of E2E test results via Gmail SMTP using nodemailer.
 * It reads the test summary from e2e-failures.txt and sends it to a configured email address.
 * 
 * Requirements:
 * - GMAIL_USER and GMAIL_PASS environment variables (GitHub Secrets)
 * - Gmail App Password (not regular password) - see: https://support.google.com/accounts/answer/185833
 * 
 * The script gracefully handles missing credentials by printing to console instead of failing.
 */

import nodemailer from "nodemailer";
import fs from "fs";

// Read test summary from file generated by run-e2e.sh
const SUMMARY_FILE = "e2e-failures.txt";
const TEST_OUTPUT_FILE = "test-output.log";

// Function to extract failure details from test output
function extractFailures() {
  if (!fs.existsSync(TEST_OUTPUT_FILE)) {
    return null;
  }
  
  const output = fs.readFileSync(TEST_OUTPUT_FILE, "utf8");
  const failures = [];
  
  // Extract failed test lines
  const lines = output.split('\n');
  let inFailure = false;
  let failureLines = [];
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    
    // Detect failure start
    if (line.includes('FAIL') || line.includes('✘') || line.includes('×') || /^\s*\d+\)/.test(line)) {
      inFailure = true;
      failureLines.push(line);
      continue;
    }
    
    // Collect failure context (next 3-5 lines)
    if (inFailure && failureLines.length < 8) {
      if (line.trim()) {
        failureLines.push(line);
      } else if (failureLines.length > 2) {
        // Empty line after failure context - save it
        failures.push(failureLines.join('\n'));
        failureLines = [];
        inFailure = false;
      }
    } else if (inFailure) {
      failures.push(failureLines.join('\n'));
      failureLines = [];
      inFailure = false;
    }
  }
  
  if (failureLines.length > 0) {
    failures.push(failureLines.join('\n'));
  }
  
  return failures.length > 0 ? failures.slice(0, 10).join('\n\n---\n\n') : null;
}

// Build comprehensive summary
let summary = "";
if (fs.existsSync(SUMMARY_FILE)) {
  summary = fs.readFileSync(SUMMARY_FILE, "utf8");
  
  // If summary indicates failures, try to extract more details
  if (summary.includes("❌") || summary.includes("FAILED") || summary.includes("FAILURES")) {
    const detailedFailures = extractFailures();
    if (detailedFailures) {
      summary += "\n\n═══════════════════════════════════════════════════════════════\n";
      summary += "Detailed Failure Logs:\n";
      summary += "═══════════════════════════════════════════════════════════════\n\n";
      summary += detailedFailures;
      summary += "\n\n(First 10 failures shown. See GitHub Actions artifacts for full logs.)";
    }
  }
} else {
  summary = "All tests passed successfully. (No summary file found)";
}

console.log("📧 Preparing email notification...");

// Check if email credentials are configured
// If not set, gracefully skip email and print summary to console
if (!process.env.GMAIL_USER || !process.env.GMAIL_PASS) {
  console.log("");
  console.log("⚠️  Email credentials not configured.");
  console.log("   Set GMAIL_USER and GMAIL_PASS in GitHub Secrets to enable email notifications.");
  console.log("");
  console.log("📧 Test Summary:");
  console.log("═══════════════════════════════════════════════════════════════");
  console.log(summary);
  console.log("═══════════════════════════════════════════════════════════════");
  process.exit(0);
}

// Configure Gmail SMTP transporter using nodemailer
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.GMAIL_USER,
    pass: process.env.GMAIL_PASS,  // Must be a Gmail App Password, not regular password
  },
});

// Email configuration
const RECIPIENT_EMAIL = "dude.dudetap001@gmail.com";

// Determine subject based on test results
const hasFailures = summary.includes("❌") || summary.includes("FAILED") || summary.includes("FAILURES");
const subject = hasFailures 
  ? "❌ E2E Test Failures - Render Production"
  : "✅ E2E Test Success - Render Production";

const mailOptions = {
  from: process.env.GMAIL_USER,
  to: RECIPIENT_EMAIL,
  subject: subject,
  text: summary,
  // Add HTML version for better formatting
  html: `<pre style="font-family: monospace; white-space: pre-wrap; background: #f5f5f5; padding: 15px; border-radius: 5px;">${summary.replace(/\n/g, '<br>').replace(/✅/g, '<span style="color: green;">✅</span>').replace(/❌/g, '<span style="color: red;">❌</span>')}</pre>`,
};

// Send email and handle errors gracefully
try {
  console.log(`📤 Sending email to ${RECIPIENT_EMAIL}...`);
  const info = await transporter.sendMail(mailOptions);
  console.log("✅ Email sent successfully!");
  console.log(`   Message ID: ${info.messageId}`);
  console.log(`   Recipient: ${RECIPIENT_EMAIL}`);
} catch (error) {
  // Log error but don't fail the workflow
  console.error("");
  console.error("❌ Failed to send email:", error.message);
  console.error("");
  console.error("Common issues:");
  console.error("  • GMAIL_PASS must be a Gmail App Password (not regular password)");
  console.error("  • 2-Factor Authentication must be enabled on Gmail account");
  console.error("  • Check GitHub Secrets are correctly set");
  console.error("");
  console.log("📧 Test Summary (email failed, printing instead):");
  console.log("═══════════════════════════════════════════════════════════════");
  console.log(summary);
  console.log("═══════════════════════════════════════════════════════════════");
  // Exit with success to not fail the workflow
  process.exit(0);
}
